
    <title>Savings Goals</title>
    <head>
    <link rel="stylesheet" href="/css/goalsMain.css">
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

</head>

<body>
    <div class="container">
        <h1>Savings Goals</h1>
        <div class="goal-container">
            <button class="arrow-button" onclick="scrollSliderLeft()"><i class="fas fa-chevron-left"></i></button>
            <div class="goal-slider">
                {{#if savings.length}}
       
 
                    {{#each savings}}
                        <div class="goal-item">
                            <div class="goal-header">
                                <h2>{{this.Saving_goalName}}</h2>
                                <div>
                                    <button onclick="showPopup('{{this.Saving_goalName}}', '{{this.Saving_id}}')">Add savings</button>
                                    <button onclick="showEditPopup('{{this.Saving_id}}', '{{this.Saving_goalName}}', '{{this.Saving_amount}}', '{{this.Saving_startDate}}', '{{this.Saving_endDate}}', '{{this.Saving_frequency}}', '{{this.Saving_calculate}}', '{{this.Saving_picture}}')">Edit goal</button>
                                    <button onclick="deleteGoal('{{this.Saving_id}}')">Delete goal</button>
                                    <a href="/addgoal"><button >Add new goal</button></a>
                                </div>
                            </div>
                            <div class="goal-details">
                                <p>Goal amount: ${{this.Saving_amount}}</p>
                                <p>{{this.Saving_frequency}} target: ${{this.Saving_calculate}}</p>
                                <p>Start date: {{this.Saving_startDate}}</p>
                                <p>End date: {{this.Saving_endDate}}</p>
                            </div>
                           
                            <div class="goal-graph">
      <canvas id="graph-{{this.Saving_id}}"></canvas>
</div>
                        </div>
                    {{/each}}
                {{else}}
                    <p>No Current Savings Goals</p>
                {{/if}}
            </div>
                      
            <button class="arrow-button" onclick="scrollSliderRight()"><i class="fas fa-chevron-right"></i></button>

        </div>
    </div>

    <div class="overlay" onclick="hidePopup()"></div>
    <div class="popup">
        <div class="popup-header">
            <h2 id="popup-title">Add Savings</h2>
            <button onclick="hidePopup()">Close</button>
        </div>
        <form id="savings-form" method="post">
            <input type="hidden" id="saving-id" name="saving_id">
            <div class="form-group">
                <label for="saving-date">Date:</label>
                <input type="date" id="saving-date" name="saving_date" required>
            </div>
            <div class="form-group">
                <label for="saving-amount">Amount:</label>
                <input type="text" id="saving-amount" name="saving_amount" required>
            </div>
            <button type="submit" class="btn-primary">Save</button>
        </form>
    </div>

    <div class="popup-edit">
        <div class="popup-header">
            <h2 id="edit-popup-title">Edit Goal</h2>
            <button onclick="hideEditPopup()">Close</button>
        </div>
        <form id="edit-form" method="post" action="/editGoal">
            <input type="hidden" id="edit-saving-id" name="saving_id">
            <div class="form-group">
                <label for="edit-goal-name">Goal Name:</label>
                <input type="text" id="edit-goal-name" name="goal_name" required>
            </div>
            <div class="form-group">
                <label for="edit-target-amount">Target Amount:</label>
                <input type="text" id="edit-target-amount" name="target_amount" required>
            </div>
            <div class="form-group">
                <label for="edit-start-date">Start Date:</label>
                <input type="date" id="edit-start-date" name="start_date" required>
            </div>
            <div class="form-group">
                <label for="edit-end-date">End Date:</label>
                <input type="date" id="edit-end-date" name="end_date" required>
            </div>
            <div class="form-group">
                <label for="edit-frequency">Frequency:</label>
                <select id="edit-frequency" name="savings_frequency" required>
                    <option value="daily">Daily</option>
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                </select>
            </div>
            <div class="form-group">
                <label for="edit-calculated-savings">Calculated Savings:</label>
                <input type="text" id="edit-calculated-savings" name="calculated_savings" required readonly>
            </div>
            <div class="form-group">
                <label for="edit-picture">Picture:</label>
                <input type="text" id="edit-picture" name="add_picture">
            </div>
            <button type="submit" class="btn-primary">Save</button>
        </form>
    </div>
    </body>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  

        


  <script>

 $(document).ready(function() {
    // Fetch data from the server
    $.ajax({
        url: '/goalsPage/data',
        method: 'GET',
        success: function(data) {
            data.forEach(goal => {
                renderGoalGraph(goal);
            });
        },
        error: function(err) {
            console.error('Error fetching goals data:', err);
        }
    });

    function renderGoalGraph(goal) {
        const ctx = document.getElementById(`graph-${goal.Saving_id}`).getContext('2d');
        const totalAmount = goal.Saving_amount;
        const savedAmount = goal.saving_entries.reduce((total, entry) => total + entry.Amount_saved, 0);
        const remainingAmount = totalAmount - savedAmount;

        const data = {
            labels: ['Saved', 'Remaining'],
            datasets: [{
                data: [savedAmount, remainingAmount],
                backgroundColor: ['#ffcc00', '#808080'],
            }]
        };

        new Chart(ctx, {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                const value = tooltipItem.raw;
                                const percentage = ((value / totalAmount) * 100).toFixed(2);
                                return `${tooltipItem.label}: ${percentage}% (${value})`;
                            }
                        }
                    },
                    legend: {
                        display: true,
                        position: 'top',
                    }
                }
            }
        });
    }
});





 
        function showPopup(goalName, savingId) {
            $('.popup').show();
            $('.overlay').show();
            $('#popup-title').text(`Add Savings for ${goalName}`);
            $('#saving-id').val(savingId);
        }

        function hidePopup() {
            $('.popup').hide();
            $('.overlay').hide();
        }

        function showEditPopup(savingId, goalName, amount, startDate, endDate, frequency, calculate, picture) {
            $('.popup-edit').show();
            $('.overlay').show();
            $('#edit-popup-title').text(`Edit Goal: ${goalName}`);
            $('#edit-saving-id').val(savingId);
            $('#edit-goal-name').val(goalName);
            $('#edit-target-amount').val(amount);
            $('#edit-start-date').val(startDate);
            $('#edit-end-date').val(endDate);
            $('#edit-frequency').val(frequency);
            $('#edit-calculated-savings').val(calculate);
            $('#edit-picture').val(picture);

            calculateSavings();
        }

        function hideEditPopup() {
            $('.popup-edit').hide();
            $('.overlay').hide();
        }

        function calculateSavings() {
            const amount = parseFloat($('#edit-target-amount').val());
            const startDate = new Date($('#edit-start-date').val());
            const endDate = new Date($('#edit-end-date').val());
            const frequency = $('#edit-frequency').val();

            const timeDiff = Math.abs(endDate - startDate);
            const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

            let period = 0;
            if (frequency === 'daily') {
                period = daysDiff;
            } else if (frequency === 'weekly') {
                period = Math.ceil(daysDiff / 7);
            } else if (frequency === 'monthly') {
                period = Math.ceil(daysDiff / 30);
            }

            const calculatedSavings = (amount / period).toFixed(2);
            $('#edit-calculated-savings').val(calculatedSavings);
        }

        $('#edit-frequency, #edit-target-amount, #edit-start-date, #edit-end-date').on('change', calculateSavings);

        function deleteGoal(savingId) {
            if (confirm("Are you sure you want to delete this goal?")) {
                $.ajax({
                    url: '/goalsPage/delete', 
                    method: 'POST',
                    data: { saving_id: savingId },
                    success: function(response) {
                       
                        console.log('Goal deleted successfully');
                        
                    },
                    error: function(err) {
                        console.error('Error deleting goal:', err);
                    }
                });
            }
        }

       function addNewSavingEntry(savingId, date, amountSaved, amountLeft) {
    $.ajax({
        url: '/goalsPage/addEntry',  // Your endpoint for adding a new saving entry
        method: 'POST',
        data: {
            saving_id: savingId,
            entry_date: date,
            amount_saved: amountSaved,
            amount_left: amountLeft
        },
        success: function(response) {
            console.log('New saving entry added successfully');

            // Fetch the updated data for the specific saving goal
            $.ajax({
                url: `/goalsPage/data/${savingId}`,  // Your endpoint for fetching data for a specific goal
                method: 'GET',
                success: function(goal) {
                    // Re-render the graph for this goal
                    renderGoalGraph(goal);
                },
                error: function(err) {
                    console.error('Error fetching goal data:', err);
                }
            });
        },
        error: function(err) {
            console.error('Error adding new saving entry:', err);
        }
    });
}


       

        function scrollSliderLeft() {
            const slider = document.querySelector('.goal-slider');
            const goalWidth = slider.querySelector('.goal-item').offsetWidth;
            slider.scrollBy({ left: -goalWidth, behavior: 'smooth' });
        }

        function scrollSliderRight() {
            const slider = document.querySelector('.goal-slider');
            const goalWidth = slider.querySelector('.goal-item').offsetWidth;
            slider.scrollBy({ left: goalWidth, behavior: 'smooth' });
            
        }

    </script>


